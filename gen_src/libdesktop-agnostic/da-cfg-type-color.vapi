/* da-cfg-type-color.vapi generated by valac, do not modify. */

[CCode (cprefix = "DesktopAgnostic", lower_case_cprefix = "desktop_agnostic_", gir_namespace = "DesktopAgnosticConfig", gir_version = "1.0")]
namespace DesktopAgnostic {
	[CCode (cprefix = "DesktopAgnosticConfig", lower_case_cprefix = "desktop_agnostic_config_", gir_namespace = "DesktopAgnosticConfig", gir_version = "1.0")]
	namespace Config {
		[CCode (cheader_filename = "libdesktop-agnostic/da-cfg-type-color.h")]
		public class ColorType : DesktopAgnostic.Config.SchemaType {
			public ColorType ();
			public override GLib.Value deserialize (string serialized) throws DesktopAgnostic.Config.SchemaError;
			public override GLib.ValueArray parse_default_list_value (GLib.KeyFile schema, string group) throws DesktopAgnostic.Config.SchemaError;
			public override GLib.Value parse_default_value (GLib.KeyFile schema, string group) throws DesktopAgnostic.Config.SchemaError;
			public override string serialize (GLib.Value val) throws DesktopAgnostic.Config.SchemaError;
			public override string name { owned get; }
			public override GLib.Type schema_type { get; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/da-cfg-type-color.h")]
		public static void color_to_string (GLib.Value src_value, out GLib.Value dest_value);
		[CCode (cheader_filename = "libdesktop-agnostic/da-cfg-type-color.h")]
		public static void string_to_color (GLib.Value src_value, out GLib.Value dest_value);
	}
}
[CCode (cheader_filename = "libdesktop-agnostic/da-cfg-type-color.h")]
public static GLib.Type register_plugin ();

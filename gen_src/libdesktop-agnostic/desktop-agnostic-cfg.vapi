/* desktop-agnostic-cfg.vapi generated by valac 0.10.4, do not modify. */

[CCode (cprefix = "DesktopAgnostic", lower_case_cprefix = "desktop_agnostic_")]
namespace DesktopAgnostic {
	[CCode (cprefix = "DesktopAgnosticConfig", lower_case_cprefix = "desktop_agnostic_config_")]
	namespace Config {
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public abstract class Backend : GLib.Object {
			public Backend ();
			public static unowned GLib.HashTable<string,GLib.Value?> get_backend_metadata_keys ();
			public abstract bool get_bool (string group, string key) throws GLib.Error;
			public abstract float get_float (string group, string key) throws GLib.Error;
			public static float get_float_from_value (GLib.Value value) throws DesktopAgnostic.Config.Error;
			public abstract int get_int (string group, string key) throws GLib.Error;
			public static int get_int_from_value (GLib.Value value) throws DesktopAgnostic.Config.Error;
			public abstract GLib.ValueArray get_list (string group, string key) throws GLib.Error;
			public abstract string get_string (string group, string key) throws GLib.Error;
			public abstract GLib.Value get_value (string group, string key) throws GLib.Error;
			public abstract new void notify (string group, string key) throws GLib.Error;
			public abstract void notify_add (string group, string key, DesktopAgnostic.Config.NotifyFunc callback) throws GLib.Error;
			public abstract void notify_remove (string group, string key, DesktopAgnostic.Config.NotifyFunc callback) throws GLib.Error;
			public abstract void remove () throws GLib.Error;
			public abstract void reset () throws GLib.Error;
			public abstract void set_bool (string group, string key, bool value) throws GLib.Error;
			public abstract void set_float (string group, string key, float value) throws GLib.Error;
			public abstract void set_int (string group, string key, int value) throws GLib.Error;
			public abstract void set_list (string group, string key, GLib.ValueArray value) throws GLib.Error;
			public abstract void set_string (string group, string key, string value) throws GLib.Error;
			public virtual void set_value (string group, string key, GLib.Value value) throws GLib.Error;
			public string? instance_id { get; construct; }
			public abstract string name { owned get; }
			public DesktopAgnostic.Config.Schema? schema { get; construct; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public class Bridge : GLib.Object {
			public void bind (DesktopAgnostic.Config.Backend config, string group, string key, GLib.Object obj, string property_name, bool read_only) throws GLib.Error;
			public GLib.Datalist<GLib.Object> get_all_bindings ();
			public static unowned DesktopAgnostic.Config.Bridge get_default ();
			public static unowned GLib.ParamSpec? get_property_spec (GLib.Object obj, string property_name);
			public void remove (DesktopAgnostic.Config.Backend config, string group, string key, GLib.Object obj, string property_name) throws GLib.Error;
			public void remove_all_for_object (DesktopAgnostic.Config.Backend? config, GLib.Object obj) throws GLib.Error;
		}
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public class Client : GLib.Object {
			public Client (string schema_filename);
			public void bind (string group, string key, GLib.Object obj, string property_name, bool read_only, DesktopAgnostic.Config.BindMethod method) throws DesktopAgnostic.Config.Error;
			public Client.for_instance (string schema_filename, string instance_id) throws GLib.Error;
			public Client.for_schema (DesktopAgnostic.Config.Schema schema, string? instance_id) throws GLib.Error;
			public bool get_bool (string group, string key) throws GLib.Error;
			public float get_float (string group, string key) throws GLib.Error;
			public int get_int (string group, string key) throws GLib.Error;
			public GLib.ValueArray get_list (string group, string key) throws GLib.Error;
			public string get_string (string group, string key) throws GLib.Error;
			public GLib.Value get_value (string group, string key) throws GLib.Error;
			public new void notify (string group, string key) throws GLib.Error;
			public void notify_add (string group, string key, DesktopAgnostic.Config.NotifyFunc callback) throws GLib.Error;
			public void notify_remove (string group, string key, DesktopAgnostic.Config.NotifyFunc callback) throws GLib.Error;
			public void remove_instance ();
			public void reset (bool instance_only) throws GLib.Error;
			public void set_bool (string group, string key, bool value) throws GLib.Error;
			public void set_float (string group, string key, float value) throws GLib.Error;
			public void set_int (string group, string key, int value) throws GLib.Error;
			public void set_list (string group, string key, GLib.ValueArray value) throws GLib.Error;
			public void set_string (string group, string key, string value) throws GLib.Error;
			public void set_value (string group, string key, GLib.Value value) throws GLib.Error;
			public void unbind (string group, string key, GLib.Object obj, string property_name, bool read_only, DesktopAgnostic.Config.BindMethod method) throws DesktopAgnostic.Config.Error;
			public void unbind_all_for_object (GLib.Object obj) throws GLib.Error;
			public string? instance_id { get; construct; }
			public string schema_filename { construct; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public class Schema : GLib.Object {
			public Schema (string filename) throws GLib.Error;
			public bool exists (string group, string key);
			public static unowned DesktopAgnostic.Config.SchemaType? find_type (GLib.Type type);
			public static unowned DesktopAgnostic.Config.SchemaType? find_type_by_name (string name);
			public GLib.List<weak string>? get_groups ();
			public unowned GLib.List<weak string>? get_keys (string group);
			public GLib.Value? get_metadata_option (string name) throws DesktopAgnostic.Config.SchemaError;
			public unowned DesktopAgnostic.Config.SchemaOption get_option (string group, string key);
			public static void register_type (DesktopAgnostic.Config.SchemaType st) throws DesktopAgnostic.Config.SchemaError;
			public string app_name { get; set; }
			public string filename { construct; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public class SchemaOption : GLib.Object {
			public SchemaOption (ref GLib.KeyFile schema, string group, string key) throws GLib.Error;
			public GLib.ValueArray? blacklist { owned get; }
			public GLib.Value default_value { get; set; }
			public string description { get; set; }
			public GLib.Type list_type { get; set; }
			public GLib.Value? lower_boundary { get; set; }
			public GLib.Type option_type { get; set; }
			public bool per_instance { get; set; }
			public string? summary { get; set; }
			public GLib.Value? upper_boundary { get; set; }
			public GLib.ValueArray? whitelist { owned get; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public abstract class SchemaType : GLib.Object {
			public SchemaType ();
			public abstract GLib.Value deserialize (string serialized) throws DesktopAgnostic.Config.SchemaError;
			public abstract GLib.ValueArray parse_default_list_value (GLib.KeyFile schema, string group) throws DesktopAgnostic.Config.SchemaError;
			public abstract GLib.Value parse_default_value (GLib.KeyFile schema, string group) throws DesktopAgnostic.Config.SchemaError;
			public abstract string serialize (GLib.Value val) throws DesktopAgnostic.Config.SchemaError;
			public abstract string name { owned get; }
			public abstract GLib.Type schema_type { get; }
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_CONFIG_BIND_METHOD_", cheader_filename = "libdesktop-agnostic/config.h")]
		public enum BindMethod {
			GLOBAL,
			INSTANCE,
			FALLBACK,
			BOTH
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_CONFIG_ERROR_", cheader_filename = "libdesktop-agnostic/config.h")]
		public errordomain Error {
			NO_SCHEMA,
			INVALID_TYPE,
			KEY_NOT_FOUND,
			METADATA_NOT_FOUND,
			NOTIFY,
			DUPLICATE_BINDING,
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_CONFIG_SCHEMA_ERROR_", cheader_filename = "libdesktop-agnostic/config.h")]
		public errordomain SchemaError {
			PARSE,
			INVALID_METADATA_OPTION,
			INVALID_METADATA_TYPE,
			INVALID_TYPE,
			INVALID_LIST_TYPE,
			TYPE_NAME_EXISTS,
			TYPE_GTYPE_EXISTS,
		}
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public delegate void NotifyFunc (string group, string key, GLib.Value value);
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public const string GROUP_DEFAULT;
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public static GLib.Type get_type () throws GLib.Error;
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public static DesktopAgnostic.Config.Backend? @new (DesktopAgnostic.Config.Schema schema) throws GLib.Error;
		[CCode (cheader_filename = "libdesktop-agnostic/config.h")]
		public static DesktopAgnostic.Config.Backend? new_for_instance (string instance_id, DesktopAgnostic.Config.Schema schema) throws GLib.Error;
	}
}

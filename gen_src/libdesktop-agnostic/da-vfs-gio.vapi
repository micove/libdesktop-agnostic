/* da-vfs-gio.vapi generated by valac 0.10.4, do not modify. */

[CCode (cprefix = "DesktopAgnostic", lower_case_cprefix = "desktop_agnostic_")]
namespace DesktopAgnostic {
	[CCode (cprefix = "DesktopAgnosticVFS", lower_case_cprefix = "desktop_agnostic_vfs_")]
	namespace VFS {
		[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
		public class FileGIO : DesktopAgnostic.VFS.File {
			public FileGIO ();
			public override bool copy (DesktopAgnostic.VFS.File destination, bool overwrite) throws GLib.Error;
			public override GLib.SList<DesktopAgnostic.VFS.File> enumerate_children () throws GLib.Error;
			public override bool exists ();
			public override string[] get_icon_names () throws GLib.Error;
			public override string get_mime_type () throws GLib.Error;
			public override string? get_thumbnail_path ();
			protected override void init (string uri);
			public override bool is_native ();
			public override bool launch () throws GLib.Error;
			public override bool load_contents (out string contents, out size_t length) throws GLib.Error;
			public override DesktopAgnostic.VFS.FileMonitor monitor ();
			public override bool remove () throws GLib.Error;
			public override bool replace_contents (string contents) throws GLib.Error;
			public override DesktopAgnostic.VFS.AccessFlags access_flags { get; }
			public override DesktopAgnostic.VFS.FileType file_type { get; }
			protected override string? impl_path { owned get; }
			protected override string impl_uri { owned get; }
			public override void* implementation { get; }
			public override DesktopAgnostic.VFS.File? parent { owned get; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
		public class FileMonitorGIO : GLib.Object, DesktopAgnostic.VFS.FileMonitor {
			public FileMonitorGIO (DesktopAgnostic.VFS.FileGIO file);
		}
		[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
		public class GIOImplementation : GLib.Object, DesktopAgnostic.VFS.Implementation {
			public GIOImplementation ();
		}
		[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
		public class TrashGIO : DesktopAgnostic.VFS.Trash, GLib.Object {
			public TrashGIO ();
		}
		[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
		public class VolumeGIO : GLib.Object, DesktopAgnostic.VFS.Volume {
			public VolumeGIO ();
			public GLib.Volume implementation { construct; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
		public class VolumeMonitorGIO : GLib.Object, DesktopAgnostic.VFS.VolumeMonitor {
			public VolumeMonitorGIO ();
		}
	}
}
[CCode (cheader_filename = "libdesktop-agnostic/da-vfs-gio.h")]
public static GLib.Type register_plugin ();

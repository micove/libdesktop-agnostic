/* desktop-agnostic-ui.vapi generated by valac, do not modify. */

[CCode (cprefix = "DesktopAgnostic", lower_case_cprefix = "desktop_agnostic_", gir_namespace = "DesktopAgnosticUI", gir_version = "1.0")]
namespace DesktopAgnostic {
	[CCode (cprefix = "DesktopAgnosticUI", lower_case_cprefix = "desktop_agnostic_ui_", gir_namespace = "DesktopAgnosticUI", gir_version = "1.0")]
	namespace UI {
		[CCode (cheader_filename = "libdesktop-agnostic/ui.h")]
		public class ColorButton : Gtk.ColorButton {
			public ColorButton ();
			public void set_alpha (uint16 alpha);
			public void set_color (Gdk.Color color);
			public ColorButton.with_color (DesktopAgnostic.Color color);
			public DesktopAgnostic.Color da_color { get; set; }
		}
		[CCode (cheader_filename = "libdesktop-agnostic/ui.h")]
		public class IconButton : Gtk.Button {
			public IconButton (string icon);
			public string icon { get; set; }
			public DesktopAgnostic.UI.IconType icon_type { get; }
			public signal void icon_selected ();
		}
		[CCode (cheader_filename = "libdesktop-agnostic/ui.h")]
		public class IconChooserDialog : Gtk.Dialog {
			public IconChooserDialog ();
			public string selected_icon { get; set; }
			public DesktopAgnostic.UI.IconType selected_icon_type { get; set; }
			public Gdk.Pixbuf selected_pixbuf { get; set; }
			public signal void icon_selected ();
		}
		[CCode (cheader_filename = "libdesktop-agnostic/ui.h")]
		public class LauncherEditorDialog : Gtk.Dialog {
			public LauncherEditorDialog (DesktopAgnostic.VFS.File file, DesktopAgnostic.VFS.File? output, bool standalone);
			public DesktopAgnostic.VFS.File file { get; construct; }
			public DesktopAgnostic.VFS.File? output { get; construct; }
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_UI_ICON_TYPE_", cheader_filename = "libdesktop-agnostic/ui.h")]
		public enum IconType {
			NONE,
			THEMED,
			FILE
		}
	}
}

/* desktop-agnostic-fdo.vapi generated by valac, do not modify. */

[CCode (cprefix = "DesktopAgnostic", lower_case_cprefix = "desktop_agnostic_", gir_namespace = "DesktopAgnosticFDO", gir_version = "1.0")]
namespace DesktopAgnostic {
	[CCode (cprefix = "DesktopAgnosticFDO", lower_case_cprefix = "desktop_agnostic_fdo_", gir_namespace = "DesktopAgnosticFDO", gir_version = "1.0")]
	namespace FDO {
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public interface DesktopEntry : GLib.Object {
			public abstract bool exists ();
			public abstract bool get_boolean (string key);
			public abstract string? get_localestring (string key, string? locale);
			public abstract string? get_string (string key);
			[CCode (array_length = false, array_null_terminated = true)]
			public abstract string[]? get_string_list (string key);
			public abstract bool key_exists (string key);
			public abstract GLib.Pid launch (DesktopAgnostic.FDO.DesktopEntryLaunchFlags flags, GLib.SList<string>? documents) throws GLib.Error;
			public abstract void save (DesktopAgnostic.VFS.File? new_file) throws GLib.Error;
			public abstract void set_boolean (string key, bool value);
			public abstract void set_localestring (string key, string locale, string value);
			public abstract void set_string (string key, string value);
			public abstract void set_string_list (string key, [CCode (array_length = false)] string[] value);
			public abstract string data { set construct; }
			public abstract DesktopAgnostic.FDO.DesktopEntryType entry_type { get; set; }
			public abstract DesktopAgnostic.VFS.File? file { get; set construct; }
			public abstract string? icon { owned get; set; }
			public abstract GLib.KeyFile keyfile { get; set construct; }
			public abstract string name { owned get; set; }
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_FDO_DESKTOP_ENTRY_LAUNCH_FLAGS_", cheader_filename = "libdesktop-agnostic/fdo.h")]
		public enum DesktopEntryLaunchFlags {
			ONLY_ONE,
			USE_CWD,
			DO_NOT_REAP_CHILD
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_FDO_DESKTOP_ENTRY_TYPE_", cheader_filename = "libdesktop-agnostic/fdo.h")]
		public enum DesktopEntryType {
			UNKNOWN,
			APPLICATION,
			LINK,
			DIRECTORY
		}
		[CCode (cprefix = "DESKTOP_AGNOSTIC_FDO_DESKTOP_ENTRY_ERROR_", cheader_filename = "libdesktop-agnostic/fdo.h")]
		public errordomain DesktopEntryError {
			INVALID_FILE,
			NOT_LAUNCHABLE,
		}
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public static DesktopAgnostic.FDO.DesktopEntry? desktop_entry_new () throws GLib.Error;
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public static DesktopAgnostic.FDO.DesktopEntry? desktop_entry_new_for_data (string data) throws GLib.Error;
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public static DesktopAgnostic.FDO.DesktopEntry? desktop_entry_new_for_file (DesktopAgnostic.VFS.File file) throws GLib.Error;
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public static DesktopAgnostic.FDO.DesktopEntry? desktop_entry_new_for_keyfile (GLib.KeyFile keyfile) throws GLib.Error;
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public static string desktop_entry_type_to_string (DesktopAgnostic.FDO.DesktopEntryType entry_type);
		[CCode (cheader_filename = "libdesktop-agnostic/fdo.h")]
		public static GLib.Type get_type () throws GLib.Error;
	}
}
